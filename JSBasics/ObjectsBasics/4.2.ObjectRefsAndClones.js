//Объекты: копирование и ссылки

// Отличие объектов от примитивов заключается в том, что объекты хранятся и копируются по ссылке. 
// Переменная, которой присвоен объект хранит не сам объект, а адрес в памяти - то есть ссылку на него. 

// При копировании переменной объекта копируется ссылка, но сам объект не дублируется.

let userA = { name: "Baka" };
let admin = userA; //копируется ссылка

// Теперь у нас есть две переменные, каждая из которых содержит ссылку на один и тот же объект.
// Мы можем использовать любую из этих переменных для доступа к объекту и изменения его содержимого.


// Сравнение по ссылке

// Два объекта равны только в том случае, если это один и тот же объект.
// Например, здесь a и b ссылаются на один тот же объект, поэтому они равны:

{
  let a = {};
  let b = a; //копирование по ссылке
  a == b; //true - обе переменные ссылаются на один и тот же объект
  a === b;//true
}
//А здесь два независимых объекта не равны, даже если они выглядят одинаково:

{
  let a = {};
  let b = {};
  a == b; //false 
  a === b;//false
}

//Для сравнения типа obj1 > obj2 или для сравнения с примитивом obj == 5 объекты преобразуются в примитивы.

//Клонирование и объединение

//Клонировать объект можно при помощи цикла for.. in, c помощью Object.assign,
//оператора spread. 
//Глубокое копирование при помощи lodash (_.cloneDeep(obj)), JSON.parse(JSON.stringify(obj)),
// structuredClone().


let user = {
  Id: 1,
  name: "Baka",
  skills: {
    "js": 100,
    "react": 100,
    
  }
};

let clone = {};

for (let key in user) {
  clone[key] = user[key]
}

//**

let clone2 = Object.assign({}, user);

//**

let clone3 = {...user};

//**

let clone4 = JSON.parse(JSON.stringify(user)) //  глубокая копия, но без функций
//**

//let clone5 = structuredClone(user); // глубокая копия, но метод с неполной поддержкой браузеров (доступно с Workers API)

console.log(clone, clone2, clone3, clone4)